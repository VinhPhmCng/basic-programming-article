<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-data-type" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Data Types</title>

  <objectives>
    <ul>
      <li>Learn about data types and how to use them.</li>
      <li>Understand <term>interactions</term> between data types.</li>
    </ul>
  </objectives>
  
  <p>
    Pretty much everything in existence can be stored as data<mdash></mdash>from numbers and letters to information about a car model.
  </p>

  <definition xml:id="def-data-type">
    <idx><h>Definitions</h><h>of data types</h></idx>
    <statement>
      <p>
        And to <term>categorize</term> data, we make use of <term>data types</term>.
      </p>
    </statement>
  </definition>

  <p>
    <idx><h>Overviews</h><h>of data types</h></idx>
    Most modern programming languages have the following data types:
    <dl>
      <li>
        <title>str</title>
        <p>
          <term>A sequence of characters</term>, enclosed in quotation marks <c>""</c> or single quotation marks <c>''</c>.
        </p>
      </li>

      <li>
        <title>int</title>
        <p>
          <term>An integer</term>, or a whole number (without a decimal point).
        </p>
      </li>

      <li>
        <title>float</title>
        <p>
          <term>A floating-point number</term> (with a decimal point).
        </p>
      </li>

      <li>
        <title>bool</title>
        <p>
          <term>A Boolean value</term>, which can only equate to either <c>True</c> or <c>False</c>. It's frequently used in conditional statements.
        </p>
      </li>

    </dl>
  </p>

  <aside>
    <title>Topic(s) you might be interested in</title>
    <p>
      <ul>
        <li>
          <p>
            <idx><h>Links</h><h>Python is dynamically typed</h></idx>
            <url href="https://www.google.com/search?q=Python+is+dynamically+typed" visual="google.com/search?q=Python+is+dynamically+typed">"Python is dynamically typed"</url>
          </p>
        </li>
      </ul>
      <ul>
        <li>
          <p>
            <idx><h>Links</h><h>static vs dynamic typing</h></idx>
            <url href="https://stackoverflow.com/a/27791387/19779259" visual="stackoverflow.com/a/27791387/19779259">example of static vs dynamic typing</url>
          </p>
        </li>
      </ul>
    </p> 
  </aside>

  <note>
    <idx><h>Notes</h><h>on data type determination</h></idx>
    <p>
      Python is a dynamically typed language. This means when a variable is declared or updated, its data type is <em>automatically</em> determined or re-determined respectively.
    </p>
  </note>

  <p>
    For example (it's recommended to use CodeLens):
  </p>

  <program language="python" interactive="activecode">
    <input>
      a = 5
      b = type(a)
      print(a, b)

      a = "5"
      b = type(a)
      print(a, b) 
    </input>
  </program>
  <problem>
    <pre>
      5 &lt;class 'int'&gt;
      5 &lt;class 'str'&gt;
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>data types</h></idx>
    <idx><h>Functions</h><h>type()</h></idx>
    <p></p>
    <p>
      The command <c>type(a)</c> returns the data type of <c>a</c> written in single quotation marks.
    </p>
    <p>
      (You don't have to care about the word <c>class</c> yet. Here it can be understood as <q>classify</q>. But to be accurate, it's refering to <term>Class</term>, which is a more advanced topic discussed in <xref ref="sec-class"/>.)
    </p>

    <aside>
      <title>Try It Out</title>
      
      <p>
        Is <c>5</c> different from <c>5.0</c>?
      </p> 
    </aside>

    <p>
      So, when we declare <c>a = 5</c>, the variable <c>a</c> is of type <c>int</c>.
    </p>
    <p>
      But when we assign <c>a</c> the value <c>"5"</c>, it automatically updates to <c>str</c>.
    </p>
  </investigation>

  <p>
    To conclude, <c>a = "5"</c> differs from <c>a = 5</c>. If data is surrounded by (single) quotation marks, then it is of type <c>str</c>. From that, we have the following:
  </p>

  <definition xml:id="def-dtype-syntax">
    <idx><h>Definitions</h><h>of data type syntax</h></idx>
    <statement>
      <p>
        Different data types have different <term>syntax</term>.
      </p>
    </statement>
  </definition>
  
  <p>Some examples of the main data types:</p>

  <sage language="python">
    <input>
      a = 3
      b = 3.0
      c = "3.0"
      d = True
      
      print(type(a))
      print(type(b))
      print(type(c))
      print(type(d))
    </input>
  </sage>
  <problem>
    <pre>
      &lt;class 'int'&gt;
      &lt;class 'float'&gt;
      &lt;class 'str'&gt;
      &lt;class 'bool'&gt;
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>data types</h></idx>
    <p></p>
    <p>
      Same as above.
    </p>
    <p>
      Again, you don't have to care about <c>class</c> yet.
    </p>
  </investigation>

  <p>
    Next, we have: 
  </p>

  <definition xml:id="def-dtype-interaction">
    <idx><h>Definitions</h><h>of data interactions</h></idx>
    <statement>
      <p>
        Data types determine possible <term>interactions</term> between data.
      </p>
      <p>
        In other words, there are many possible interactions between data (mathematical calculations, string concatenation, <etc></etc>), and what they are <em>depends on</em> the data type(s) involved.
      </p>
    </statement>
  </definition>

  <p>
    For example:
  </p>

  <sage language="python">
    <input>
      a = 5
      b = -2
      print(a + b)

      c = 3.5
      d = 5.6
      print(c + d)

      print(a + c)
    </input>
  </sage>
  <problem>
    <pre>
      3
      9.1
      8.5
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>data interactions</h></idx>
    <p></p>
    <p>
      We know both <c>a</c> and <c>b</c> are of type <c>int</c>. So, adding them together makes sense and is allowed.
    </p>
    <p>
      Similarly, <c>c</c> and <c>d</c> are both <c>float</c>, so addition is valid.
    </p>
    <p>
      The last line is a bit more interesting since we can still perform an addition between <c>int</c> and <c>float</c>.
    </p>
  </investigation>

  <p>
    We can also <q>add</q> two or more strings together, resulting in a new string that is the concatenation of the component strings. For example:
  </p>  

  <sage language="python">
    <input>
      s1 = "Hello"
      s2 = "Jack"
      s3 = " Jane"
      
      print(s1 + s2)
      print(s1 + s3)
    </input>
  </sage>
  <problem>
    <pre>
      HelloJack
      Hello Jane
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>string concatenation</h></idx>
    <p></p>
    <p>
      <c>s1 + s2</c> is valid and concatenates the strings, same with <c>s1 + s3</c>.
    </p>
    <p>
      Notice the difference between <c>s2</c> and <c>s3</c> and how it's reflected in the concatenated strings.
    </p>
  </investigation>
  
  <p>
    However, we <em>cannot</em> add <c>int</c> and <c>str</c> together, which will result in an <term>error</term>:
  </p>

  <aside>
    <title>Topic(s) you might be interested in</title>
    <p>
      <ul>
        <li>
          <p>
            <idx><h>Links</h><h>Python add int to string</h></idx>
            <url href="https://www.google.com/search?q=Python+how+to+add+int+to+string" visual="google.com/search?q=Python+how+to+add+int+to+string">"Python how to add int to string"</url>
          </p>
        </li>
      </ul>
    </p> 
  </aside>

  <sage language="python">
    <input>
      a = 5
      s = "string"
      print(a + s)
    </input>
  </sage>
  <problem>
    <pre>
      TypeError
      Cell In [1], line 3

      ...

      TypeError: unsupported operand type(s) for +: 'int' and 'str'
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>invalid data interactions</h></idx>
    <p></p>
    <p>
      The operator <c>+</c> is an <em>invalid</em> interaction between <c>int</c> và <c>str</c>.
    </p>
  </investigation>

  <figure>
    <caption>Basic Programming <mdash /> Part 6: Data Types</caption>
    <idx><h>Videos</h><h>part 06</h></idx>
    
    <video youtube="iMXToAm9a0c" label="sec-data-type-34-3"/>
      
  </figure>

</section>