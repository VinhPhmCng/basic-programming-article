<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-function" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Hàm</title>

  <objectives>
    <ul>
      <li>Tìm hiểu hàm và cách sử dụng chúng.</li>
    </ul>
  </objectives>
  
  <p>
    Ta lại gặp một khái niệm nữa rất thân thuộc trong toán học<mdash /><term>hàm</term>. Và nó cũng đóng vai trò thiết yếu trong lập trình.
  </p>

  <p>
    Giả sử ta có 100 biểu thức toán:

    <md>
      <mrow>1^2 + 2 \cdot 1 + 1</mrow>
      <mrow>2^2 + 2 \cdot 2 + 1</mrow>
      <mrow>\vdots</mrow>
      <mrow>100^2 + 2 \cdot 100 + 1</mrow>
    </md>

    Ta nhận ra chúng đều có dạng là đa thức bậc hai. Vậy, ta có thể rút gọn cách trình bày bằng hàm số như sau:

    <md>
      <mrow>f(x) = x^2 + 2 \cdot x + 1</mrow>
      <mrow></mrow>
      <mrow>f(1)</mrow>
      <mrow>f(2)</mrow>
      <mrow>\vdots</mrow>
      <mrow>f(100)</mrow>
    </md>
  </p>

  <p>
    Đó cũng là cốt lõi của <term>hàm</term> trong lập trình.
  </p>

  <definition xml:id="def-function">
    <idx><h>Khái niệm</h><h>hàm</h></idx>
    <statement>
      <p>
        <term>Hàm</term> là một đoạn code có thể tái sử dụng được dùng để thực hiện một tác vụ nào đó.
      </p>
      <p>
        Hàm có thể nhận không, một, hay nhiều hơn dữ liệu <term>đầu vào</term>, còn được gọi là <term>tham số</term>.
      </p>
      <p>
        Hàm có thể trả lại không, một, hay nhiều hơn dữ liệu <term>đầu ra</term>, còn được gọi là <term>giá trị trả lại</term>.
      </p>
      <p>
        Thuật ngữ cho việc tạo ra một hàm mới là <term>khai báo hàm</term>.
      </p>
      <p>
        Thuật ngữ cho việc sử dụng một hàm là <term>gọi hàm</term>.
      </p>
    </statement>
  </definition>

  <note>
    <idx><h>Chú ý</h><h>dùng hàm</h></idx> 
    <p>
      Ở phần này, ta sẽ không đi sâu vào cú pháp khai báo hàm, mà chỉ tập trung vào việc sử dụng những hàm có sẵn hoặc được cung cấp bởi thư viện.
    </p>
    <p>
      Để biết thêm về cú pháp khai báo hàm, tham khảo <xref ref="sec-declare-function" text="type-local"/>.
    </p>
  </note>

  <technology xml:id="syntax-call-function">
    <title>Gọi hàm</title>
    <idx><h>Cú pháp</h><h>gọi hàm</h></idx>
    <p>
      <em>Tùy vào cách một hàm được khai báo</em>, ta có hai cách để gọi nó: <me>{\color{blue} \text{tên hàm}} \, \text{(đầu vào 1, đầu vào 2, ...)}</me> hoặc <me>\text{đầu vào 1.} {\color{blue} \text{tên hàm}} \, \text{(đầu vào 2, đầu vào 3, ...)}</me>
    </p>
  </technology>
  
  <p>
    Một ví dụ thân thuộc là hàm <c>print()</c>. Nó có thể được gọi ở bất cứ nơi nào, và với một tập hợp các dữ liệu đầu vào bất kỳ. Và nó đưa dữ liệu ra terminal.
  </p>

  <sage language="python">
    <input>
      print(5) 
      print()
      print(2, -2)
      print(1, "Hello World!", 5.5)
    </input>
  </sage>
  <problem>
    <pre>
      5
      
      2 -2
      1 Hello World! 5.5
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm print()</h></idx>
    <idx><h>Hàm</h><h>print()</h></idx>
    <p></p>
    <p>
      Dòng 1: Ta gọi hàm <c>print()</c> với một dữ liệu đầu vào là <c>5</c>.
    </p>
    <p>
      Dòng 2: Ta không truyền dữ liệu đầu vào, nên <c>print()</c> xuất ra terminal một dòng trắng.
    </p>
    <p>
      Dòng 3: Ta cho nó hai dữ liệu đầu vào là <c>2</c> và <c>-2</c>.
    </p>
    <p>
      Dòng 4: Ta truyền cho nó nhiều dữ liệu đầu vào thuộc các kiểu dữ liệu khác nhau.
    </p>
  </investigation>

  <p>
    Một ví dụ nữa là hàm <c>len()</c>. Nó chấp nhận duy nhất một đầu vào là một cấu trúc dữ liệu và trả lại số phần tử.
  </p>

  <aside>
    <title>Thí Nghiệm Vui</title>
    
    <p>
      <c>len()</c> có hoạt động với <c>str</c> không?
    </p> 
  </aside>

  <sage language="python">
    <input>
      arr = [1, 2, 3, 4]
      print(len(arr))
    </input>
  </sage>
  <problem>
    <pre>
      4
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm len()</h></idx>
    <idx><h>Hàm</h><h>len()</h></idx>
    <p>
      Hàm <c>len()</c> nhận một cấu trúc dữ liệu và trả lại số phần tử.
    </p>
  </investigation>
  
  <p>
    Vậy, hàm <c>len()</c> có nhiều yêu cầu hơn <c>print()</c>. Bạn phải gọi hàm này với duy nhất một giá trị đầu vào, và giá trị đó phải là một cấu trúc dữ liệu. Hai ví dụ sau sẽ xuất hiện lỗi:
  </p>

  <aside>
    <title>Thí Nghiệm Vui</title>
    
    <p>
      Sửa lỗi.
    </p>
  </aside>

  <sage language="python">
    <input>
      arr1 = [1, 2, 3]
      arr2 = [4, 5, 6]
      print(len(arr1, arr2))
    </input>
  </sage>
  <problem>
    <pre>
      TypeError
      Cell In [1], line 3

      ...

      TypeError: len() takes exactly one argument (2 given)
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm len()</h></idx>
    <idx><h>Hàm</h><h>len()</h></idx>
    <p></p>
    <p>Hàm <c>len()</c> chấp nhận chính xác một giá trị đầu vào, nhưng lại nhận được hai.</p>
  </investigation>

  <p>
    Ví dụ tiếp theo:
  </p>

  <sage language="python">
    <input>
      a = 5
      print(len(a))
    </input>
  </sage>
  <problem>
    <pre>
      TypeError
      Cell In [1], line 2

      ...

      TypeError: object of type 'int' has no len()
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm len()</h></idx>
    <idx><h>Hàm</h><h>len()</h></idx>
    <p></p>
    <p>
      Đầu vào của <c>len()</c> phải là một cấu trúc dữ liệu, nhưng nó lại dược gọi với một <c>int</c>.
    </p>
  </investigation>

  <p>
    Ví dụ cuối cùng của ta là hàm <c>upper()</c>. Nó tuân theo <xref ref="syntax-call-function" text="custom">cú pháp gọi hàm</xref> thứ hai, với <q>đầu vào 1</q> là một chuỗi ký tự. Và nó trả lại một chuỗi mới với mọi ký tự được viết hoa.
  </p>

  <aside>
    <title>Thí Nghiệm Vui</title>
    
    <p>
      Đoán hàm có chức năng biến một chuỗi thành in thường.
    </p>
  </aside>

  <sage language="python">
    <input>
      s = "Hello friend!" 

      print(s.upper())
    </input>
  </sage>
  <problem>
    <pre>
      HELLO FRIEND!
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm upper()</h></idx>
    <idx><h>Hàm</h><h>upper()</h></idx>
    <p>Hàm <c>upper()</c> trả lại một chuỗi mới được in hoa.</p>
  </investigation>
 
  <p>
    Ví dụ xuất hiện lỗi:
  </p>

  <sage language="python">
    <input>
      a = 5 
      print(a.upper())
    </input>
  </sage>
  <problem>
    <pre>
      AttributeError
      Cell In [1], line 2

      ...

      AttributeError: 'int' object has no attribute 'upper'
    </pre>
  </problem>
  <investigation>
    <idx><h>Ví dụ code</h><h>hàm upper()</h></idx>
    <idx><h>Hàm</h><h>upper()</h></idx>
    <p></p>
    <p>
      Hàm <c>upper()</c> chỉ nhận duy nhất một dữ liệu đầu vào có kiểu <c>str</c>, nhưng lại nhận được kiểu <c>int</c>.
    </p>
    <p>
      Dịch nôm na miêu tả lỗi, ta được <q>int không có thuộc tính upper</q>.
    </p>
  </investigation>

  <p>
    <cd>
    </cd>
  </p>

  <exploration>
    <title>Basic Programming <mdash /> Part 10: Functions</title>
    <idx><h>Video</h><h>phần 10</h></idx>
  
    <p>
      Coming soon.
    </p>
    
    <video youtubeplaylist="PLBLdRr-v59vwnKvmvLtcgmAnsb2K1Ta_M" />
    
  </exploration>

</section>
