<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-variable" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Variables</title>

  <objectives>
    <ul>
      <li>Learn about variables and how to use them.</li>
      <li>Understand how the equal sign <c>=</c> isn't associated with equality in programming.</li>
    </ul>
  </objectives>
  
  <p>
    <term>Variables</term> are one of the most fundamental concepts in programming.
  </p>

  <p>
    In mathematics, we often see the variable <m>x</m> in functions such as: <me>f(x) = x^2 + 2x + 1</me> Here <q>variable</q> means can be changed and is not fixed.
  </p>

  <definition xml:id="def-variable">
    <idx><h>Definitions</h><h>of variables</h></idx>
    <statement>
      <p>
        In programming, <term>variables</term> are used to store data.
      </p>

      <p>
        The data stored inside a variable is called <term>value</term>, which is <em>often updated</em> as new data needs to be stored.
      </p>

      <p>
        To <term>declare</term> a variable is to create a new variable.
      </p>
      
      <p>
        To <term>assign</term> data to an existing variable is to <term>update</term> its value to that data.
      </p>
    </statement>
  </definition>

  <technology>
    <title>Declaring and assigning</title>
    <idx><h>Syntax</h><h>of declaration</h></idx>
    <idx><h>Syntax</h><h>of assignment</h></idx>
    <p>
      In Python, to declare or assign values to a variable, we use the equal sign <c>=</c>: <me>{\color{blue} \text{name}} = \text{value}</me>
    </p>
    <p>
      Therefore, the equal sign <c>=</c> in programming should <em>never</em> be used for equality.
    </p>
  </technology>
  
  <p>
    For example (using CodeLens is recommended):
  </p>

  <program language="python" interactive="activecode">
    <input>
      a = 1
      b = a
      print(a)
      print(b)

      # Update variable
      a = 2
      print(a)
      print(b)
    </input>
  </program>
  <problem>
    <pre>
      1
      1
      2
      1
    </pre>
  </problem>
  <investigation>
    <idx><h>Code examples</h><h>declaration</h></idx>
    <idx><h>Code examples</h><h>assignment</h></idx>
    <p></p>
    <p>
      Firstly, we declare the variable <c>a</c> and assign it the value <c>1</c>.
    </p>
    <p>
      Next, we declare and assign <c>b</c> the current value of <c>a</c>, thus <c>b</c> also has the value <c>1</c>. 
    </p>
    <p>
      We then use the command <c>print()</c> to access and display their current values in the terminal.
    </p>
    <p>
      Next, we assign <c>a</c> a new value of <c>2</c>, but we do not touch <c>b</c>.
    </p>

    <aside>
      <title>Try It Out</title>
      
      <p>
        If after updating <c>a</c>, we want <c>b</c> to again have the same value as <c>a</c>, then we have to update <c>b</c> accordingly.
      </p> 
    </aside>

    <p>
      <idx><h>Notes</h><h>on equality</h></idx>
      <alert>Note</alert>: If at this step you think that the values of <c>a</c> and <c>b</c> should both be <c>2</c>, then you are still associating <c>=</c> with equality, which is not the case for programming.
    </p>

    <p>
      Finally, we use <c>print()</c> again to see the difference. 
    </p>
  </investigation>

  <insight>
    <idx><h>Insights</h><h>equality</h></idx>
    <p>
      The above example, though simple, confuses many beginners, especially those with a mathematical brain. Because they see <c>b = a</c>, they think it's an equality that holds true throughout the program's lifecycle. That mindset does <em>not</em> apply to programming.
    </p>
  </insight>

  <note>
    <title>Naming a variable</title>
    <idx><h>Notes</h><h>on variable names</h></idx>
    <idx><h>Conventions</h><h>of variable names</h></idx>

    <aside>
      <title>Topic(s) you might be interested in:</title>
      <p>
        <ul>
          <li>
            <p>
              <idx><h>Links</h><h>legal variable names</h></idx>
              <url href="https://www.google.com/search?q=what+variable+names+are+allowed+in+Python" visual="google.com/search?q=what+variable+names+are+allowed+in+Python">"what variable names are allowed in Python"</url>
            </p>
          </li>
          <li>
            <p>
              <idx><h>Links</h><h>Python naming conventions</h></idx>
              <url href="https://www.google.com/search?q=variable+naming+conventions+in+Python" visual="google.com/search?q=variable+naming+conventions+in+Python">"variable naming conventions in Python"</url>
            </p>
          </li>
        </ul>
      </p>
    </aside>
    
    <p>
      A variable's name has some specifications. The following names will raise a syntax error:

      <ul>
        <li>
          <c>my var = 5</c> (contains white-spaces)
        </li>
        <li>
          <c>#my_var = 5</c> (contains a special character)
        </li>
        <li>
          <c>1st_var = 5</c> (starts with a number)
        </li>
        <li>
          <c>print = 5</c> (matches a reserved keyword)
        </li>
      </ul>
    </p>

    <p>
      Avoid those, and you can name a variable whatever you'd like. That's why, depending on the individual, variable names can vary.
      <ul>
        <li>
          house_address
        </li>
        <li>
          houseAddress
        </li>
        <li>
          HouseAddress
        </li>
        <li>
          ha
        </li>
        <li>
          hAddress
        </li>
        <li>
          house_add
        </li>
        <li>
          <etc></etc>
        </li>
      </ul>
    </p>
    <p>
      In the world of programming, there are different conventions for naming a variable.
    </p>
    <p>
      It's a skill to know how to name a variable appropriately, but this article will not instruct you in that. Variables in our code examples are named in a <em>short and simple</em> fashion.
    </p>
  </note>

  <figure>
    <caption>Basic Programming <mdash /> Part 5: Variables</caption>
    <idx><h>Videos</h><h>part 05</h></idx>
    
    <video youtube="iMXToAm9a0c" label="sec-variable-14-3"/>
      
  </figure>

</section>