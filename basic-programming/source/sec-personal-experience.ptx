<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-personal-experience" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Kinh Nghiệm Cá Nhân</title>

  <objectives>
    <ul>
      <li>
        Tôi muốn chia sẻ với bạn một vài chủ đề thú vị và đáng biết trước khi bạn tiếp tục với những khái niệm phức tạp hơn.
      </li>
      <li>
        Phần này có chút dài dòng, nên bạn có thể chọn ra những gì bạn thấy thú vị để đọc. Hoặc bạn cũng có thể chỉ xem video và bỏ qua văn bản. 
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      Tiếp đến là một số trong rất nhiều bài học tôi đã học được trong sự nghiệp của mình. Trước khi ta bắt đầu, tôi có vài lời muốn nói với bạn.
    </p>

    <p>
      Thật sự mà nói thì, nếu có thể bắt đầu lại hành trình học code, tôi vẫn sẽ làm mọi thứ đúng như vậy. Chính là nhờ những bài học rút ra từ sự thiếu kinh nghiệm mà tôi được như ngày hôm nay. Ngoài ra, tôi cũng thường hay tham khảo những sai lầm được đăng trên Internet và từ đó tránh mắc phải chúng. Chính vì thế mà tôi nghĩ phần này là một ý tưởng hay.
    </p>

    <p>
      Nếu bài viết này là nơi bạn tiếp xúc với lập trình lần đầu tiên, thì khả năng cao là bạn sẽ có một cách tiếp cận rất khác tôi, tất nhiên là theo hướng tốt.
    </p>

    <p>
      Thú thật, tôi muốn bạn mắc thật nhiều lỗi, nên bài viết này không phải là một hướng dẫn về cách tránh sai lầm, mà chỉ là ý kiến cá nhân của tôi. Đây chính là cách bố mẹ đã dạy dỗ tôi, và tôi rất biết ơn họ. Về cơ bản, họ không giúp tôi tránh xa lỗi lầm, vì điều đó có nghĩa là tôi không học được gì cả. Thay vào đó, họ dạy tôi học hỏi từ những sai lầm một cách hiệu quả nhất.
    </p>

    <p>
      Được rồi, tôi hy vọng bạn sẽ thấy phần này hữu ích.
    </p>

  </introduction>

  <subsection xml:id="subsec-pe-start-simple">
    <title>Khởi Đầu Đơn Giản</title>

    <p>
      I think when I first got into programming, I cared too much about choosing a programming language to learn. My Youtube feed and recommendations always had those topics mentioned in <xref ref="insight-choose-pro-language" text="global"/>. My inexperienced self would think those were important things to consider, and I'd watch every video that showed up to see people's opinions. But doing all that only made me scared of actually learning to code because I'd start asking myself questions like: 

      <ul>
        <li>
          <q>What if I learn the <sq>wrong</sq> language and it gets obsolete in the future?</q>
        </li>
        <li>
          <q>What if language A is a better choice than language B a few years from now?</q>
        </li>
        <li>
          <q>How long would it take me to master this language?</q>
        </li>
        <li>
          <etc />
        </li>
      </ul>
    </p>

    <p>
      At one point, I learned to think in a different way. For instance, there's a period when I was very into game development, and it kinda went like this:

      <ul>
        <li>
          <q>Okay. I wanna make a game, so I'm gonna look up <sq>game engines for beginners</sq> on Google.</q>
        </li>
        <li>
          After a few articles and videos, I ended up with Godot<mdash />an open-source game engine that's been gaining popularity, has a big and supportive community, and sufficient documentation.
        </li>
        <li>
          <q>Okay, now do I wanna use GDScript (Godot's built-in language which has beginner-friendly syntax), or C# (supported by Godot for advanced customization which requires more skill).</q>
        </li>
        <li>
          Well, that question only took me 10 seconds to answer. I ain't about to learn C# to make no games.
        </li>
      </ul>

      After that, it was really just a constant cycle of studying online materials and experimenting with stuff.
    </p>

    <p>
      Because I already had some ideas in mind, I got straight into making them and learning necessary concepts as I went, but never more than I needed. If I got stuck, it'd mean I had some online research to do. Otherwise, I was doing just fine with whatever knowledge I had, even if my solutions weren't the most effective or beautiful.
    </p>

    <p>
      Personally, I think it's good that I did that instead of watching a 12-hour course covering every little thing about game development and making somebody else's idea.
    </p>

    <p>
      <sq>Starting simple</sq> can also be applied to choosing a code editor or IDE (integrated development environment). I chose the Godot engine also because it comes with a built-in coding environment. Until now, I think I've tried 5 IDEs at most, and I've been sticking with VSCode for a while because, again, it's beginner-friendly.
    </p>

    <p>
      The code cells provided in this article are very minimal and might be slightly inconvenient, but they're everything you need to start, aren't they?
    </p>

    <warning>
      <p>
        You can choose a programming language and a code editor/IDE by thinking simply. Start by coming up with a small and achievable idea and then look for suitable tools by asking the Internet.
      </p>  
    </warning>
    
  </subsection>

  <subsection xml:id="subsec-pe-tutorial-hell">
    <title>Tutorial Hell</title>

    <p>
      The tutorial hell is something every programmer has experienced at least once in their life. It's when you are constantly watching videos and reading articles teaching you to do something, but you never actually sit down and type away at a computer.
    </p>

    <p>
      The reason for this phenomenon could be a lack of motivation or ideas, procrastination, poor social media management, <etc /> It's also because there's an abundance of online resources and contents about coding, which can be excessive sometimes.
    </p>

    <p>
      Whenever this happens to me, I'd force myself to put down the phone and turn on my computer. Then I'd open up the browser and code editor and start looking for something very easy to do and also interesting enough. This whole process takes at most 5 minutes, but it always gets me to begin writing some code, whatever it may be about.
    </p>

    <warning>
      <p>
        Just do something. You learn by doing, not by mindlessly consuming content.
      </p>
    </warning>
    
  </subsection>

  <subsection xml:id="subsec-pe-have-fun">
    <title>Have Fun</title>
    <p>
      Since stress and burn-outs are gonna be unavoidable sometimes, I think it's incredibly important to always have fun with the process. There are always annoying error messages showing up one after another, getting stuck while following step-by-step installation guides, understanding nothing about a new concept, and so on. And sometimes you're gonna feel as though you're not making any progress, so you doubt yourself and wonder if programming is not for you.
    </p>

    <p>
      Honestly, these kinds of stress occur in every creative discipline and to everybody. Some days are good, some days are bad. So, why not just enjoy the process and have fun along the way?
    </p>

    <p>
      Know that even if you think you're not making any progress, you definitely are. The author of <sq>Atomic Habits</sq><mdash />James Clear<mdash />associates this feeling with the <term>Value of Disappointment</term>. Basically, your progress is <em>not</em> a linear line always going up that you can feel every day. Instead, it's more of an exponential curve that starts slow and gradually picks up the speed. Though there are days when you feel like it's not going anywhere, there are also days when something just clicks, and you're on a roll.
    </p>

    <p>
      If you get stuck, maybe find a new simple goal and learn a new language? You've learned the fundamentals, which are applicable to most modern programming languages. So as you learn the 2nd, the 3rd language, and so on, you're discovering new possibilities, and your potential is only ever going up.
    </p>

    <warning>
      <p>
        So long as you find joy in the process, you can always get back to it and do better than ever before.
      </p>
      <p>
        If you keep learning and doing, you will improve without a doubt.
      </p>
    </warning>
    
  </subsection>

  <subsection xml:id="subsec-pe-open-minded">
    <title>Cởi Mở?</title>
    
    <p>
      There are always gonna be new interesting things to learn. So keep an open mind and be eager to learn them.
    </p>
    
    <p>
      In coding communities, there are often these conventions and rules of thumb such as how to name variables, how to format code, how to organize files, <etc /> So people learn them to improve efficiency and cooperation. And depending on the community, purpose, and choice of programming language, standards are gonna vary. Thus, you should be objective and neutral when entering new environments and meeting new people, since you have to learn their game.
    </p>

    <p>
      As a beginner, only you will ever read your own code. So, it's good to create a good balance between learning good habits and having freedom. Basically, you should always try to improve your code, but also take it easy. There's no need to be able to produce beautiful or efficient code right off the bat, cause that'd be super stressful.
    </p>

    <p>
      Experienced programmers often share best practices. These can be extremely beneficial to know about, but also harmful if overused without a good understanding. They are supposed to help you think critically and adapt quickly to different situations, not make you a close-minded coder who always does things the same way.
    </p>

    <warning>
      <p>
        You should always be open to new ideas.
      </p>
      <p>
        You should keep a balance between building good habits and trying new things.
      </p>
    </warning>
    
  </subsection>
  
  <subsection xml:id="subsec-pe-tech-pointer">
    <title>Một Số Gợi Ý Chuyên Môn</title>
    
    <introduction>
      <p>
        I'll try my best to make this short and easy to understand.
      </p>
    </introduction>

    <subsubsection xml:id="subsubsec-pe-virtual-environment">
      <title>Dùng Một Môi Trường Ảo Cơ Bản</title>
      
      <p>
        Let's say you decide to install Python on your machine to make a game. So you do just that<mdash />you download and install Python version 3.11.6 and Pygame (the Python library for making games). And everything works just fine.
      </p>

      <p>
        Fast forward, now you wanna make some cool animations with Python. So you ask the Internet and Manim shows up. And you follow its installation guide and are very eager to get started. At one point, it says something along the lines of <q>Manim needs Python version 3.12.1 to work...</q> Not a problem? All you have to do is update Python and everything's good to go again.
      </p>

      <p>
        However, when you go back to your Pygame projects, which were running just fine before, there are errors. Looking them up, you find out that Pygame doesn't work with Python version 3.12.1 yet. So do you downgrade Python to continue developing games at the expense of Manim, or do you forsake the games you've been so passionate about?
      </p>

      <p>
        A worse case is when you accidentally install both versions of Python on your machine and have them run simultaneously. Now this is really gonna mess you and your PC up as conflicts upon conflicts show up.
      </p>

      <p>
        So, a straightforward solution is to use a virtual environment, which prevents the not-so-hypothetical predicament above. It helps manage programming packages and dependencies on a per-environment basis, meaning you can have multiple environments unrelated to one another. Maybe one for game development, and one for animating?
      </p>

      <warning>
        <p>
          Look for and use a simple virtual environment, which helps prevent conflicts between incompatible programming packages and dependencies.
        </p>
      </warning>
      
    </subsubsection>

    <subsubsection xml:id="subsubsec-pe-cli">
      <title>Biết Một Ít Giao Diện Dòng Lệnh</title>
      
      <p>
        When the time comes for you to explore different languages and tools on your own, you will have to use command-line interfaces (CLIs) frequently. For the sake of simplicity, CLIs are just the <sq>lower-level</sq> counterparts of user interfaces (UI). On Windows, the two built-in CLIs are Command Prompt (CMD) and Windows PowerShell.
      </p>

      <p>
        But don't worry, you don't have to take a course on this. You will gradually learn the common commands as you go. Detailed guides always have commands ready to be copy-pasted into your CLI and run with a press of the Enter key anyways.
      </p>

      <p>
        Honestly, when I use PyPI (or PIP, which is a package manager for Python) all I know is how to install, update, and uninstall stuff. And I use the CMD for navigating files, switching between administration modes, and using virtual environments. That's it, nothing else really.
      </p>
      
      <p>
        Finally, if errors show up when using CLIs, you just need to apply exactly what you've learned in the previous section.
      </p>

      <warning>
        <p>
          As you explore on your own, you will naturally learn to use command-line interfaces.
        </p>
      </warning>

    </subsubsection>

  </subsection>

  <conclusion>
    <p>
      <cd>
      </cd>
    </p>

    <exploration>
      <title>Basic Programming <mdash /> Part 12: My Experiences</title>
      <idx><h>Video</h><h>phần 12</h></idx>
    
      <video youtube="iMXToAm9a0c"/>
      
    </exploration>

  </conclusion>

</section>