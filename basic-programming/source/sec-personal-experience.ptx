<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-personal-experience" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Kinh Nghiệm Cá Nhân</title>

  <objectives>
    <ul>
      <li>
        Tôi muốn chia sẻ với bạn một vài chủ đề thú vị và đáng biết trước khi bạn tiếp tục với những khái niệm phức tạp hơn.
      </li>
      <li>
        Phần này có chút dài dòng, nên bạn có thể chọn ra những gì bạn thấy thú vị để đọc. Hoặc bạn cũng có thể chỉ xem video và bỏ qua văn bản. 
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      <cd>
      </cd>
    </p>

    <exploration>
      <title>Basic Programming <mdash /> Part 12: My Experiences</title>
      <idx><h>Video</h><h>phần 12</h></idx>
    
      <p>
        Coming soon.
      </p>
      
      <video youtubeplaylist="PLBLdRr-v59vwnKvmvLtcgmAnsb2K1Ta_M" />
      
    </exploration>

    <p>
      <cd>
      </cd>
    </p>

    <p>
      Tiếp đến là một số trong rất nhiều bài học tôi đã học được trong sự nghiệp của mình. Trước khi ta bắt đầu, tôi có vài lời muốn nói với bạn.
    </p>

    <p>
      Thật sự mà nói thì, nếu có thể bắt đầu lại hành trình học code, tôi vẫn sẽ làm mọi thứ đúng như vậy. Chính là nhờ những bài học rút ra từ sự thiếu kinh nghiệm mà tôi được như ngày hôm nay. Ngoài ra, tôi cũng thường hay tham khảo những sai lầm được đăng trên Internet và từ đó tránh mắc phải chúng. Chính vì thế mà tôi nghĩ đề mục này là một ý tưởng hay.
    </p>

    <p>
      Nếu bài viết này là nơi bạn tiếp xúc với lập trình lần đầu tiên, thì khả năng cao là bạn sẽ có một cách tiếp cận rất khác tôi, tất nhiên là theo hướng tốt.
    </p>

    <p>
      Thú thật, tôi muốn bạn mắc thật nhiều lỗi, nên bài viết này không phải là một hướng dẫn về cách tránh sai lầm, mà chỉ là ý kiến cá nhân của tôi. Đây chính là cách bố mẹ đã dạy dỗ tôi, và tôi rất biết ơn họ. Về cơ bản, họ không giúp tôi tránh xa lỗi lầm, vì điều đó có nghĩa là tôi không học được gì cả. Thay vào đó, họ dạy tôi học hỏi từ những sai lầm một cách hiệu quả nhất.
    </p>

    <p>
      Được rồi, tôi hy vọng bạn sẽ thấy bài viết này hữu ích.
    </p>

  </introduction>

  <subsection xml:id="subsec-pe-start-simple">
    <title>Khởi Đầu Đơn Giản</title>

    <warning>
      <p>
        Bạn có thể chọn một ngôn ngữ lập trình, trình soạn thảo, hay IDE bằng cách suy nghĩ đơn giản.
      </p>  
      <p>
        Hãy bắt đầu bằng việc nảy ra một ý tưởng nhỏ và có thể thực hiện được. Sau đó, hỏi Internet và tìm kiếm các công cụ và tài liệu học tập phù hợp.
      </p>
    </warning>
    
    <p>
      Khi tôi mới bước chân vào lập trình, tôi đã quan tâm quá nhiều đến việc chọn một ngôn ngữ lập trình để học. Youtube hay đề xuất cho tôi những chủ đề được nhắc đến trong <xref ref="insight-choose-pro-language" text="global"/>. Vì thiếu kinh nghiệm, tôi luôn nghĩ chúng là những điều quan trọng cần được cân nhắc, và tôi sẽ cày mọi video để xem ý kiến của mọi người. Nhưng, việc này chỉ khiến tôi ngày càng sợ việc học code, vì tôi sẽ thường xuyên hỏi bản thân những câu hỏi như:

      <ul>
        <li>
          <q>Nếu như mình học <sq>sai</sq> ngôn ngữ và nó trở nên lỗi thời trong tương lai thì sao?</q>
        </li>
        <li>
          <q>Nếu như A trở thành lựa chọn tốt hơn B vài năm kể từ bây giờ thì sao?</q>
        </li>
        <li>
          <q>Mình sẽ mất bao lâu để <sq>làm chủ</sq> ngôn ngữ này?</q>
        </li>
        <li>
          v.v.
        </li>
      </ul>
    </p>

    <p>
      Đến một lúc nào đó, tôi đã học suy nghĩ theo một hướng khác. Để ví dụ, có một khoảng thời gian tôi rất hứng thú với game development, và nó diễn ra như thế này: 

      <ul>
        <li>
          <q>OK, mình muốn làm game. Thế thì tra Google <sq>game engines for beginners</sq> nào.</q>
        </li>
        <li>
          Sau một vài bài viết và video, tôi tìm thấy Godot<mdash />một game engine mã nguồn mở đang ngày càng phổ biến, có cộng đồng lớn ủng hộ, và đầy đủ tài liệu.
        </li>
        <li>
          <q>OK, bây giờ thì mình muốn dùng GDScript (ngôn ngữ có sẵn của Godot, có cú pháp thân thiện người dùng), hay là C# (một ngôn ngữ phổ biến hơn, có cú pháp bậc thấp hơn)?</q>
        </li>
        <li>
          Chà, tôi chỉ mất 10 giây để trả lời câu hỏi đó. <q>Có c*t bố mày mới học C# để làm game.</q>
        </li>
      </ul>

      Sau đó, nó thực sự chỉ là tham khảo tài liệu trên mạng và thử nghiệm nhiều thứ, lặp đi lặp lại.
    </p>

    <p>
      Có sẵn ý tưởng trong đầu, tôi chỉ việc bắt tay vào thực hiện và học những khái niệm cần thiết trong quá trình, nhưng không bao giờ hơn mức cần thiết. Nếu gặp khó khăn có nghĩa là tôi phải học thêm cái gì đó. Còn không thì tôi cứ tiếp tục với lượng kiến thức mình có, ngay cả khi cách làm của tôi không quá đẹp đẽ hay hiệu quả.
    </p>

    <p>
      Cá nhân tôi nghĩ phong cách đó hợp với mình. Tôi không muốn ngồi xem một video dài 12 tiếng bao gồm mọi chi tiết nhỏ nhặt về phát triển game, để rồi cuối cùng làm một trò chơi là ý tưởng của người khác.
    </p>

    <p>
      <sq>Bắt đầu đơn giản</sq> cũng có thể được áp dụng để chọn một trình soạn thảo và biên dịch code. Cho đến nay, chắc tôi đã thử cùng lắm là 5 IDE (integrated development environments), và tôi gắn bó với VSCode nhiều nhất vì, một lần nữa, nó thân thiện người dùng.
    </p>

    <p>
      Các ô code được cung cấp ở đây có thể rất khiêm tốn và hơi bất tiện, nhưng chúng là tất cả những gì bạn cần để bắt đầu, phải không nào?
    </p>

  </subsection>

  <subsection xml:id="subsec-pe-tutorial-hell">
    <title>Tutorial Hell</title>

    <warning>
      <p>
        Làm gì cũng được, miễn là làm gì đó. Bạn học bằng cách thực hành, chứ không phải tiêu thụ mạng xã hội.
      </p>
    </warning>
    
    <p>
      Mọi lập trình viên đều đã từng trải qua <sq>tutorial hell</sq>. Đó là khi bạn liên tục xem video và đọc các bài viết hướng dẫn bạn làm gì đó, nhưng bạn không bao giờ thực sự ngồi xuống và code.
    </p>

    <p>
      Nguyên nhân của hiện tượng này có thể là sự thiếu động lực, thiếu ý tưởng, sự trì hoãn, kỹ năng quản lý sử dụng mạng xã hội kém, v.v. Một phần là do có rất nhiều nội dung về code trên mạng, đôi khi nhiều hơn cần thiết.
    </p>

    <p>
      Khi cảm thấy mình đang trải nghiệm <sq>turoial hell</sq>, tôi sẽ buộc mình phải đặt điện thoại xuống và bật máy tính lên. Rồi tôi mở Google và VSCode và bắt đầu tìm kiếm thứ gì đó thật dễ làm mà cũng đủ thú vị. Toàn bộ quá trình này tốn cùng lắm là 5 phút, nhưng nó luôn thành công khiến tôi viết code, bất kể là về cái gì.
    </p>

  </subsection>

  <subsection xml:id="subsec-pe-have-fun">
    <title>Tận Hưởng</title>

    <warning>
      <p>
        Miễn là bạn tìm thấy niềm vui trong quá trình, bạn luôn có thể quay lại và làm tốt hơn bao giờ hết.
      </p>
      <p>
        Nếu bạn tiếp tục học và làm, bạn chắc chắn sẽ tiến bộ.
      </p>
    </warning>
    
    <p>
      Đôi khi, bị căng thẳng hay kiệt sức là điều không thể tránh khỏi. Vì vậy, tôi nghĩ việc tận hưởng quá trình là vô cùng quan trọng.
    </p>

    <p>
      Đừng lo, chắc chắn bạn sẽ phải trải qua:
      <ul>
        <li>
          lỗi, lỗi, và lỗi
        </li>
        <li>
          bị kẹt khi làm theo hướng dẫn từng bước
        </li>
        <li>
          không hiểu gì cả khi học khái niệm mới
        </li>
        <li>
          v.v.
        </li>
      </ul>
      Và sẽ có những lúc bạn cảm thấy mình đang chả tiến bộ gì cả, rồi bạn nghi ngờ bản thân và tự hỏi liệu lập trình phải chăng là một ý tưởng tồi.
    </p>

    <p>
      Thành thật mà nói, những kiểu căng thẳng này xảy ra trong mọi lĩnh vực sáng tạo và đối với tất cả mọi người. Có ngày bạn cảm thấy tốt, có ngày thì không. Thế thì, thà cứ tận hưởng và vui chơi trong suốt quá trình, phải không nào?
    </p>

    <p>
      Hãy hiểu rằng, ngay cả khi bản thân nghĩ mình đang không tiến bộ, thì bạn đang luôn luôn tiến bộ. Tác giả của quyển <sq>Atomic Habits</sq><mdash />James Clear<mdash />liên kết cảm giác này với <term>Thung lũng Thất vọng</term>. Về cơ bản, sự tiến bộ <em>không</em> phải là một đường thẳng tuyến tính luôn đi lên mà bạn có thể cảm thấy mỗi ngày. Thay vào đó, nó giống như một đường cong lũy tiến. Nó bắt đầu chậm, nhưng dần dần sẽ tăng tốc độ. Mặc dù có những ngày bạn cảm thấy không đâu vào đâu cả, cũng có những ngày mọi thứ lại đâu vào đó, và bạn cảm giác mình đang phát triển rất nhanh.
    </p>

    <p>
      Nếu bạn bị kẹt, sao không thử tìm một mục tiêu mới đơn giản và học một ngôn ngữ mới? Bạn đã học hết những kiến thức cốt lõi, có thể được áp dụng cho hầu hết các ngôn ngữ lập trình hiện đại. Vì vậy, khi bạn học ngôn ngữ thứ hai, thứ ba, v.v., bạn đang khám phá những khả năng mới và tăng tiềm năng bản thân. 
    </p>

  </subsection>

  <subsection xml:id="subsec-pe-open-minded">
    <title>Khách Quan</title>
    
    <warning>
      <p>
        Hãy luôn cởi mở với những ý tưởng mới.
      </p>
      <p>
        Bạn nên giữ cân bằng giữa việc xây dựng thói quen tốt và thử những thứ mới.
      </p>
    </warning>
    
    <p>
      Luôn có những thứ mới mẻ và thú vị để học hỏi. Vì vậy, hãy giữ một tâm trí cởi mở và ham học.
    </p>
    
    <p>
      Trong các cộng đồng lập trình, ta thường hay thấy những quy ước hay quy tắc ngón tay cái như:
      <ul>
        <li>
          cách đặt tên biến
        </li>
        <li>
          cách định dạng code
        </li>
        <li>
          cách sắp xếp thư mục
        </li>
        <li>
          v.v.
        </li>
      </ul>
      Mọi người tuân theo chúng để nâng cao hiệu quả và hợp tác. Và tùy thuộc vào cộng đồng, mục đích, hay ngôn ngữ lập trình, các tiêu chuẩn sẽ thay đổi. Vì vậy, bạn nên giữ một thái độ khách quan và trung lập khi bước vào một môi trường mới và gặp gỡ mọi người, vì bạn làm quen với <sq>trò chơi</sq> của họ.
    </p>

    <p>
      Đối với người mới, sẽ chẳng có ai khác ngoài bạn đọc code mà bạn viết. Vì vậy, việc cân bằng thói quen và sự tự do là một ý tưởng tốt. Bạn nên cố gắng cải thiện cách viết code của mình, nhưng cũng nên từ từ và không cố quá. Việc viết code một cách đẹp đẽ hay hiệu quả ngay lập tức là không cần thiết, và cũng sẽ cực kỳ căng thẳng.
    </p>

    <p>
      Các lập trình viên kỳ cựu thường hay chia sẻ thói quen tốt của họ. Những chia sẻ này có thể rất có ích, nhưng cũng có thể gây hại nếu bạn lạm dụng chúng mà không thực sự hiểu biết. Mục đích của việc học thói quen của người khác là giúp bạn phân tích và thích nghi với tình huống mới, chứ không phải biến bạn thành một coder bảo thủ, luôn làm mọi thứ theo một cách.
    </p>

  </subsection>
  
  <subsection xml:id="subsec-pe-tech-pointer">
    <title>Một Số Gợi Ý Chuyên Môn</title>
    
    <introduction>
      <p>
      </p>
    </introduction>

    <subsubsection xml:id="subsubsec-pe-virtual-environment">
      <title>Dùng Một Môi Trường Ảo Cơ Bản</title>
      
      <warning>
        <p>
          Tìm hiểu và sử dụng một môi trường ảo đơn giản. Nó giúp phòng ngừa sự không thích giữa các thư viện và gói phụ thuộc.  
        </p>
      </warning>
      
      <p>
        Giả sử bạn muốn làm game với Python. Nên bạn tải và cài đặt Python bản 3.11.6 và Pygame (thư viện để làm game của Python). Và có vẻ mọi thứ đều hoạt động tốt.
      </p>

      <p>
        Một thời gian sau... Tự nhiên bạn muốn làm animation với Python. Nên bạn hỏi Internet, và Manim xuất hiện. Bạn hào hứng làm theo hướng dẫn cài đặt của nó và rất háo hức để bắt đầu. Nhưng, tại một lúc nào đó, CLI thông báo dòng chữ <q>Manim cần Python phiên bản 3.12.1 để hoạt động...</q> Không thành vấn đề? Bạn chỉ việc cập nhật Python và mọi thứ lại hoạt động ngon lành.
      </p>

      <p>
        However, when you go back to your Pygame projects, which were running just fine before, there are errors. Looking them up, you find out that Pygame doesn't work with Python version 3.12.1 yet. So do you downgrade Python to continue developing games at the expense of Manim, or do you forsake the games you've been so passionate about?

        Tuy nhiên, khi bạn muốn quay trở lại với các dự án Pygame vốn đang chạy bình thường trước đó, thì bạn thấy lỗi xuất hiện. Lên mạng tìm kiếm lý do, bạn nhận ra Pygame chưa tương thích với Python bản 3.12.1.
      </p>

      <p>
        Vậy, bạn sẽ làm gì? Liệu bạn có hạ cấp Python để có thể tiếp tục làm game và sẽ từ bỏ Manim? Hay bạn sẽ từ bỏ những dự án game tâm huyết của mình?
      </p>

      <p>
        Tệ hơn nữa là trường hợp bạn vô tình cài đặt cả hai phiên bản của Python và để chúng chạy đồng thời. Lúc này, chúng sẽ xung đột với nhau và làm rối tung máy tính của bạn.
      </p>

      <p>
        Vậy, một giải pháp đơn giản là sử dụng môi trường ảo, thứ sẽ giúp phòng ngừa tình huống trên. Nhiệm vụ của nó là quản lý các tập tin và gói phụ thuộc và sắp xếp chúng vào những môi trường riêng biệt. Điều này nghĩa là bạn có thể có nhiều môi trường phát triển không liên quan đến nhau.
      </p>

      <p>
        Bây giờ, bạn có thể thiết lập hai môi trường riêng biệt<mdash />một cái cài đặt Python 3.11.6 và Pygame, và cái còn lại sử dụng Python 3.12.1 và Manim. Vấn đề đã được giải quyết! 
      </p>

    </subsubsection>

    <subsubsection xml:id="subsubsec-pe-cli">
      <title>Biết Một Ít Giao Diện Dòng Lệnh (CLI)</title>
      
      <warning>
        <p>
          Khi tự mình khám phá thế giới của lập trình, bạn sẽ dần dần học cách sử dụng giao diện dòng lệnh.
        </p>
      </warning>

      <p>
        Khi bạn tự mình khám phá các ngôn ngữ và công cụ khác, bạn sẽ phải thường xuyên sử dụng giao diện dòng lệnh (CLI). Về cơ bản, CLI là phiên bản <sq>bậc thấp</sq> hơn của giao diện người dùng (UI). Trên Windows, hai CLI có sẵn là Command Prompt (CMD) và Windows PowerShell.
      </p>

      <p>
        Nhưng đừng lo, bạn không cần phải tìm một khóa học về CLI đâu. Bạn sẽ dần dần học được những câu lệnh thường dùng xuyên suốt quá trình. Đằng nào các hướng dẫn trên mạng cũng luôn có sẵn các câu lệnh, và bạn chỉ việc sao chép, dán, và chạy chúng bằng CLI.
      </p>

      <p>
        Thú thực, khi tôi dùng PyPI (hoặc PIP, một trình quản lý thư viện cho Python), tất cả những gì tôi biết là cách cài đặt, cập nhật, và gỡ cài đặt. Ngoài ra, tôi sử dụng CMD để điều hướng thư mục, chuyển đổi chế độ quản trị, và sử dụng môi trường ảo. Tất cả chỉ có vậy thôi.
      </p>
      
      <p>
        Cuối cùng, nếu có lỗi xuất hiện khi sử dụng CLI, bạn chỉ việc áp dụng chính xác những gì được học ở phần trước.
      </p>

    </subsubsection>

  </subsection>

</section>